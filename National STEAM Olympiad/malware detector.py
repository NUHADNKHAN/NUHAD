from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
import psutil
import re
from plyer import notification
import threading


class WannaCryConfickerJensenSlammerMelissaSobigFSasserStormwormZeusSpyEyeDetector(App):
    def build(self):
        layout = BoxLayout(orientation='vertical', spacing=10, padding=10)

        title_label = Label(text='WannaCry, Conficker, Jensen, Slammer, Melissa, Sobig.F, Sasser, Stormworm, Zeus, SpyEye Detector', font_size=20)
        detect_button = Button(text='Detect Malware', size_hint=(1, 0.5))
        detect_button.bind(on_press=self.start_detection_thread)

        layout.add_widget(title_label)
        layout.add_widget(detect_button)

        return layout

    def detect_malware(self):
        malware_patterns = {
            'WannaCry': r'.*wannacry.*',
            'Conficker': r'.*conficker.*',
            'Jensen': r'.*jensen.*',
            'Slammer': r'.*slammer.*',
            'Melissa': r'.*melissa.*',
            'Sobig.F': r'.*sobig.*',
            'Sasser': r'.*sasser.*',
            'Stormworm': r'.*stormworm.*',
            'Zeus': r'.*zeus.*',
            'SpyEye': r'.*spyeye.*',
        }

        running_processes = psutil.process_iter(['pid', 'name'])
        detected_malware = []

        for process in running_processes:
            process_name = process.info['name'].lower()

            for malware_name, pattern in malware_patterns.items():
                if re.match(pattern, process_name):
                    detected_malware.append(malware_name)

        if detected_malware:
            detected_malware_str = ', '.join(detected_malware)
            notification.notify(
                title='Malware Detected!',
                message=f"Suspicious processes found: {detected_malware_str}",
                timeout=10
            )
        else:
            notification.notify(
                title='No Malware Detected',
                message='Your system is safe from the mentioned malware.',
                timeout=10
            )

    def on_stop(self):
        # Called when the app is closed
        psutil.Process().kill()  # Kill the background process

    def start_detection_thread(self, instance):
        detection_thread = threading.Thread(target=self.detect_malware)
        detection_thread.start()

        detection_progress_thread = threading.Thread(target=self.update_detection_progress_thread, args=(detection_thread,))
        detection_progress_thread.start()

    def update_detection_progress_thread(self, detection_thread):
        while detection_thread.is_alive():
            # Update the detection progress in the UI or display a progress bar
            # You can implement this method based on your UI requirements
            pass

    def show_notification(self, title, message):
        notification.notify(
            title=title,
            message=message,
            timeout=10
        )


if __name__ == '__main__':
    WannaCryConfickerJensenSlammerMelissaSobigFSasserStormwormZeusSpyEyeDetector().run()
